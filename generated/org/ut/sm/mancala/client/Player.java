/*
 * generated by Fujaba - CodeGen2
 */
package org.ut.sm.mancala.client;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Player
{



   public  Player (String name )
   {
      boolean fujaba__Success = false;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.name = name;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return ;
   }

   /**
    * <pre>
    *           1     has     6
    * Player ------------------------- Cup
    *           player               cup
    * </pre>
    */
   public static final String PROPERTY_CUP = "cup";

   @Property( name = PROPERTY_CUP, partner = Cup.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Cup> cup;

   @Property( name = PROPERTY_CUP )
   public Set<? extends Cup> getCup()
   {
      return ((this.cup == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.cup));
   }

   @Property( name = PROPERTY_CUP )
   public boolean addToCup (Cup value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.cup == null)
         {
            this.cup = new FHashSet<Cup> ();

         }
      
         changed = this.cup.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CUP )
   public Player withCup (Cup value)
   {
      addToCup (value);
      return this;
   }

   public Player withoutCup (Cup value)
   {
      removeFromCup (value);
      return this;
   }


   public boolean removeFromCup (Cup value)
   {
      boolean changed = false;

      if ((this.cup != null) && (value != null))
      {
      
         changed = this.cup.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_CUP )
   public void removeAllFromCup (){
   
      Cup tmpValue;
      Iterator<? extends Cup> iter = this.iteratorOfCup ();
      while (iter.hasNext ())
      {
         tmpValue = (Cup) iter.next ();
         this.removeFromCup (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_CUP )
   public boolean hasInCup (Cup value)
   {
      return ((this.cup != null) &&
              (value != null) &&
              this.cup.contains (value));
   }

   @Property( name = PROPERTY_CUP )
   public Iterator<? extends Cup> iteratorOfCup ()
   {
      return ((this.cup == null)
              ? FEmptyIterator.<Cup>get ()
              : this.cup.iterator ());
   }

   @Property( name = PROPERTY_CUP )
   public int sizeOfCup ()
   {
      return ((this.cup == null)
              ? 0
              : this.cup.size ());
   }

   /**
    * <pre>
    *           2     contains     1
    * Player ------------------------- Game
    *           player               game
    * </pre>
    */
   public static final String PROPERTY_GAME = "game";

   @Property( name = PROPERTY_GAME, partner = Game.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Game game;

   @Property( name = PROPERTY_GAME )
   public boolean setGame (Game value)
   {
      boolean changed = false;

      if (this.game != value)
      {
      
         Game oldValue = this.game;
         Player source = this;
         if (this.game != null)
         {
            this.game = null;
            oldValue.removeFromPlayer (this);
         }
         this.game = value;

         if (value != null)
         {
            value.addToPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME )
   public Player withGame (Game value)
   {
      setGame (value);
      return this;
   }

   public Game getGame ()
   {
      return this.game;
   }

   /**
    * <pre>
    *           1     has     0..1
    * Player ------------------------- Kahala
    *           player               kahala
    * </pre>
    */
   public static final String PROPERTY_KAHALA = "kahala";

   @Property( name = PROPERTY_KAHALA, partner = Kahala.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Kahala kahala;

   @Property( name = PROPERTY_KAHALA )
   public boolean setKahala (Kahala value)
   {
      boolean changed = false;

      if (this.kahala != value)
      {
      
         Kahala oldValue = this.kahala;
         Player source = this;
         if (this.kahala != null)
         {
            this.kahala = null;
            oldValue.setPlayer (null);
         }
         this.kahala = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_KAHALA )
   public Player withKahala (Kahala value)
   {
      setKahala (value);
      return this;
   }

   public Kahala getKahala ()
   {
      return this.kahala;
   }

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           1     isActive     1
    * Player ------------------------- Game
    *           isActive               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, partner = Game.PROPERTY_IS_ACTIVE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Game turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Game value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Game oldValue = this.turn;
         Player source = this;
         if (this.turn != null)
         {
            this.turn = null;
            oldValue.setIsActive (null);
         }
         this.turn = value;

         if (value != null)
         {
            value.setIsActive (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Player withTurn (Game value)
   {
      setTurn (value);
      return this;
   }

   public Game getTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.removeAllFromCup ();
      this.setGame (null);
      this.setKahala (null);
      this.setTurn (null);
   }
}


