/*
 * generated by Fujaba - CodeGen2
 */
package org.ut.sm.mancala.client;
import java.util.ArrayList;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Game
{



   private  Game ()
   {

      gameHistory = new ArrayList();
      return ;
   }

   /**
    * <pre>
    *           0..1     arrayList     0..1
    * Game ------------------------> ArrayList
    *           game               gameHistory
    * </pre>
    */
   public static final String PROPERTY_GAME_HISTORY = "gameHistory";

   @Property( name = PROPERTY_GAME_HISTORY, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private ArrayList gameHistory;

   @Property( name = PROPERTY_GAME_HISTORY )
   public boolean setGameHistory (ArrayList value)
   {
      boolean changed = false;

      if (this.gameHistory != value)
      {
      
         ArrayList oldValue = this.gameHistory;
         this.gameHistory = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME_HISTORY )
   public Game withGameHistory (ArrayList value)
   {
      setGameHistory (value);
      return this;
   }

   public ArrayList getGameHistory ()
   {
      return this.gameHistory;
   }

   /**
    * <pre>
    *           0..1     gameRecord     0..1
    * Game ------------------------> CurrentGameRecord
    *           game               gameRecord
    * </pre>
    */
   public static final String PROPERTY_GAME_RECORD = "gameRecord";

   @Property( name = PROPERTY_GAME_RECORD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private CurrentGameRecord gameRecord;

   @Property( name = PROPERTY_GAME_RECORD )
   public boolean setGameRecord (CurrentGameRecord value)
   {
      boolean changed = false;

      if (this.gameRecord != value)
      {
      
         CurrentGameRecord oldValue = this.gameRecord;
         this.gameRecord = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME_RECORD )
   public Game withGameRecord (CurrentGameRecord value)
   {
      setGameRecord (value);
      return this;
   }

   public CurrentGameRecord getGameRecord ()
   {
      return this.gameRecord;
   }

   /**
    * <pre>
    *           0..1     gameStatus     0..n
    * Game ------------------------> GameStatus
    *           game2               gameStatus2
    * </pre>
    */
   public static final String PROPERTY_GAME_STATUS2 = "gameStatus2";

   @Property( name = PROPERTY_GAME_STATUS2, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<GameStatus> gameStatus2;

   @Property( name = PROPERTY_GAME_STATUS2 )
   public Set<? extends GameStatus> getGameStatus2()
   {
      return ((this.gameStatus2 == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.gameStatus2));
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public boolean addToGameStatus2 (GameStatus value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.gameStatus2 == null)
         {
            this.gameStatus2 = new FHashSet<GameStatus> ();

         }
      
         changed = this.gameStatus2.add (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public Game withGameStatus2 (GameStatus value)
   {
      addToGameStatus2 (value);
      return this;
   }

   public Game withoutGameStatus2 (GameStatus value)
   {
      removeFromGameStatus2 (value);
      return this;
   }


   public boolean removeFromGameStatus2 (GameStatus value)
   {
      boolean changed = false;

      if ((this.gameStatus2 != null) && (value != null))
      {
      
         changed = this.gameStatus2.remove (value);
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public void removeAllFromGameStatus2 (){
      if (this.gameStatus2 != null && this.gameStatus2.size () > 0)
      {
      
         this.gameStatus2.clear();
      
      }
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public boolean hasInGameStatus2 (GameStatus value)
   {
      return ((this.gameStatus2 != null) &&
              (value != null) &&
              this.gameStatus2.contains (value));
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public Iterator<? extends GameStatus> iteratorOfGameStatus2 ()
   {
      return ((this.gameStatus2 == null)
              ? FEmptyIterator.<GameStatus>get ()
              : this.gameStatus2.iterator ());
   }

   @Property( name = PROPERTY_GAME_STATUS2 )
   public int sizeOfGameStatus2 ()
   {
      return ((this.gameStatus2 == null)
              ? 0
              : this.gameStatus2.size ());
   }

   public static Game getInstance ()
   {

      return instance;
   }

   public static final String PROPERTY_INSTANCE = "instance";

   @Property( name = PROPERTY_INSTANCE, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private static final Game instance = new Game();


   /**
    * <pre>
    *           1     isActive     1
    * Game ------------------------- Player
    *           turn               isActive
    * </pre>
    */
   public static final String PROPERTY_IS_ACTIVE = "isActive";

   @Property( name = PROPERTY_IS_ACTIVE, partner = Player.PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player isActive;

   @Property( name = PROPERTY_IS_ACTIVE )
   public boolean setIsActive (Player value)
   {
      boolean changed = false;

      if (this.isActive != value)
      {
      
         Player oldValue = this.isActive;
         Game source = this;
         if (this.isActive != null)
         {
            this.isActive = null;
            oldValue.setTurn (null);
         }
         this.isActive = value;

         if (value != null)
         {
            value.setTurn (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_IS_ACTIVE )
   public Game withIsActive (Player value)
   {
      setIsActive (value);
      return this;
   }

   public Player getIsActive ()
   {
      return this.isActive;
   }

   /**
    * <pre>
    *           1     contains     2
    * Game ------------------------- Player
    *           game               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_GAME, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Player> player;

   @Property( name = PROPERTY_PLAYER )
   public Set<? extends Player> getPlayer()
   {
      return ((this.player == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.player));
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean addToPlayer (Player value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.player == null)
         {
            this.player = new FHashSet<Player> ();

         }
      
         changed = this.player.add (value);
         if (changed)
         {
            value.setGame (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Game withPlayer (Player value)
   {
      addToPlayer (value);
      return this;
   }

   public Game withoutPlayer (Player value)
   {
      removeFromPlayer (value);
      return this;
   }


   public boolean removeFromPlayer (Player value)
   {
      boolean changed = false;

      if ((this.player != null) && (value != null))
      {
      
         changed = this.player.remove (value);
         if (changed)
         {
            value.setGame (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public void removeAllFromPlayer (){
   
      Player tmpValue;
      Iterator<? extends Player> iter = this.iteratorOfPlayer ();
      while (iter.hasNext ())
      {
         tmpValue = (Player) iter.next ();
         this.removeFromPlayer (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PLAYER )
   public boolean hasInPlayer (Player value)
   {
      return ((this.player != null) &&
              (value != null) &&
              this.player.contains (value));
   }

   @Property( name = PROPERTY_PLAYER )
   public Iterator<? extends Player> iteratorOfPlayer ()
   {
      return ((this.player == null)
              ? FEmptyIterator.<Player>get ()
              : this.player.iterator ());
   }

   @Property( name = PROPERTY_PLAYER )
   public int sizeOfPlayer ()
   {
      return ((this.player == null)
              ? 0
              : this.player.size ());
   }

   public void removeYou()
   {
      this.setGameHistory (null);
      this.setGameRecord (null);
      this.removeAllFromGameStatus2 ();
      this.setIsActive (null);
      this.removeAllFromPlayer ();
   }
}


